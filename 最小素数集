package wangpingyu;
import java.util.Scanner;
public class rtret{
	public static void main(String[] args){
	Scanner cin=new Scanner(System.in);
    int m=cin.nextInt();
    int b=0,e=0,z;
    int c[]=new int[100];
    int a[]=new int[m];
    for(int i=0;i<m;i++)
    {
    	a[i]=cin.nextInt();
    }
    for(int w=0;w<m;w++)
    {
    for(int i=2;i<=a[w];i++)
	{
		if(a[w]%i==0)
		{
			for(int q=i;q>1;q--)
			{
				if(i%q==0)
				{
					b+=1;
				}
			}
			if(b==1)
			{
				c[e]=i;
				e+=1;
			}
			b=0;
		}
	}
    }
    for(int i=0;i<=e;i++) {
    	for(int j=1;j<=e;j++)
    	{
			if(c[j]<c[j-1])
			{
				z=c[j];
				c[j]=c[j-1];
				c[j-1]=z;
			}
    	}
    }
    for(int i=0;i<=e;i++) {
    	for(int j=i+1;j<=e;j++) {
    		if(c[i]==c[j]) {
    			c[j]=0;
    		}
    	}
    }
    for(int i=0;i<=e;i++) {
    	if(c[i]!=0) {
    	System.out.print(c[i]+" ");
    	}
    }
}
}
/.由数学基本定理可知：任何一个大于1的非素数整数都可以唯一分解成若干个素数的乘积。编写程序，从控制台读入一组大于1的整数（小于等于20个，且每个整数的大小不会超过int数据类型表示的范围），求这些整数分解成素数的最小集。该最小素数集是所有整数分解成的素数的并集（若输入的整数是素数，则该素数可以直接加入最小素数集），并且重复的素数只保留一个。按从小到大的顺序输出求得的最小素数集。

【输入形式】

先从控制台输入整数的个数，然后在下一行输入所有整数，各整数之间以一个空格分隔。

【输出形式】

在标准输出上按从小到大顺序输出求得的最小素数集，各素数之间以一个空格分隔，最后一个整数后也可以有一个空格。

【输入样例】

8
13 20 200 3456650 687 12308760 7 131

【输出样例】

2 3 5 7 13 29 131 229 257 269

【样例说明】

输入的整数有8个。其中有三个素数：13、7和131可以直接加入最小素数集。对于其它整数，20分解成的素数乘积为：2*2*5，200分解成的素数乘积为：2*2*2*5*5,3456650分解成的素数乘积为：2*5*5*257*269，687分解成的素数乘积为：3*229,12308760分解成的素数乘积为：2*2*2*3*3*3*3*5*29*131。这些素数形成的最小集为：2 3 5 7 13 29 131 229 257 269。
